#!/bin/bash

set -e pipefail

function require_env() {
  varname="$1"
  value="${!varname}"

  if [ -z "$value" ]; then
    echo "Set $varname" 1>&2
    exit 1
  fi

  echo $value
}

host=$(require_env 'HOST')
user=$(require_env 'USER')
password=$(require_env 'PASSWORD')
target_folder=$(require_env 'TARGET_FOLDER')
paths_list=$(require_env 'PATHS_LIST')

options=""
if [[ "$SKIP_SSL_VERIFICATION" == '1' ]]; then
  options="set ssl:verify-certificate false"
fi

# Black magic from https://stackoverflow.com/questions/6250698/how-to-decode-url-encoded-string-in-shell
urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

urldecode_file() {
    file=$1
    while IFS='' read -r line || [[ -n "$line" ]]; do
        urldecode "$line"
    done < "$1"
}

mirror_commands=$(
    urldecode_file $paths_list | \
        # Escape spaces in paths
        sed 's/ /\\ /' |\
        sed -r "
            # Remove comments, empty lines
            /^#/d
            /^$/d

            s#(.*)+#mirror --verbose \1$target_folder\1#g
        "
)

commands="
$options

open $host
user $user $password

$mirror_commands

bye
"

echo "$commands" | sed 's/^user.*/user REDACTED/'

lftp -f "$commands"
